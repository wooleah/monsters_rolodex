{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","item","className","src","id","alt","name","email","CardList","items","map","key","SearchBox","placeholder","handleChange","type","onChange","App","state","monsters","searchField","e","setState","target","value","fetch","then","response","json","data","this","lowerCasedSearchField","toLowerCase","filteredMonsters","filter","monster","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAQaA,G,kBAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAClB,yBAAKC,UAAU,kBACb,yBAAKC,IAAG,+BAA0BF,EAAKG,GAA/B,iBAAkDC,IAAI,YAC9D,4BAAKJ,EAAKK,MACV,2BAAIL,EAAKM,UCHAC,EAAW,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MACzB,OACE,yBAAKP,UAAU,aACZO,EAAMC,KAAI,SAAAT,GAAI,OACb,kBAAC,EAAD,CAAMU,IAAKV,EAAKG,GAAIH,KAAMA,SCVrBW,G,MAAY,SAAC,GAMnB,IALLC,EAKI,EALJA,YACAC,EAII,EAJJA,aAKA,OACE,2BACEC,KAAK,SACLb,UAAU,SACVW,YAAaA,EACbG,SAAUF,MCiEDG,E,4MAxCbC,MAAiB,CACfC,SAAU,GACVC,YAAa,I,EAWfN,aAAe,SAACO,GACd,EAAKC,SAAS,CAAEF,YAAaC,EAAEE,OAAOC,S,kEATnB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GAAD,OACJ,EAAKP,SAAS,CAAEH,SAAUU,S,+BAQtB,IAAD,EAC2BC,KAAKZ,MAA/BC,EADD,EACCA,SACFY,EAFC,EACWX,YACwBY,cACpCC,EAAmBd,EAASe,QAAO,SAAAC,GACvC,OACEA,EAAQ7B,KAAK0B,cAAcI,SAASL,IACpCI,EAAQ5B,MAAMyB,cAAcI,SAASL,MAIzC,OACE,yBAAK7B,UAAU,OACb,gDACA,kBAAC,EAAD,CACEW,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,kBAAC,EAAD,CAAUL,MAAOwB,S,GAnCPI,aC3BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0b0baf4e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { CardListItem } from \"../../types/cardListItem.model\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\ntype CardProps = {\r\n  item: CardListItem;\r\n};\r\nexport const Card = ({ item }: CardProps) => (\r\n  <div className=\"card-container\">\r\n    <img src={`https://robohash.org/${item.id}.png?set=set2`} alt=\"monster\" />\r\n    <h1>{item.name}</h1>\r\n    <p>{item.email}</p>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport { Card } from \"../card/card.component\";\r\nimport { CardListItem } from \"../../types/cardListItem.model\";\r\n\r\ntype CardListProps = {\r\n  items: CardListItem[];\r\n};\r\n\r\nexport const CardList = ({ items }: CardListProps) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {items.map(item => (\r\n        <Card key={item.id} item={item}></Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({\r\n  placeholder,\r\n  handleChange\r\n}: {\r\n  placeholder: string;\r\n  handleChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}) => {\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      className=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.tsx</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport type Monster = {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  strength?: number;\r\n};\r\n\r\ntype MyProps = {};\r\ntype MyState = {\r\n  monsters: Monster[];\r\n  searchField: string;\r\n};\r\n\r\nclass App extends Component<MyProps, MyState> {\r\n  state: MyState = {\r\n    monsters: [],\r\n    searchField: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then((data: { id: number; name: string; email: string }[]) =>\r\n        this.setState({ monsters: data })\r\n      );\r\n  }\r\n\r\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    this.setState({ searchField: e.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { monsters, searchField } = this.state;\r\n    const lowerCasedSearchField = searchField.toLowerCase();\r\n    const filteredMonsters = monsters.filter(monster => {\r\n      return (\r\n        monster.name.toLowerCase().includes(lowerCasedSearchField) ||\r\n        monster.email.toLowerCase().includes(lowerCasedSearchField)\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox\r\n          placeholder=\"search monsters\"\r\n          handleChange={this.handleChange}\r\n        />\r\n        <CardList items={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}